{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\React\\\\coderhouse\\\\src\\\\components\\\\Context\\\\CartContext.js\";\nimport React, { useState } from 'react';\nexport const CartContext = React.createContext([]);\nexport const CartProvider = props => {\n  const [item, setItem] = useState([]);\n  const [cart, setCart] = useState([]); //para manejar el array del carrito\n\n  const [long, setLong] = useState(0); //para manejar la longitud (cantidad) de items agregados al carrito (comienza en 0)\n\n  const [total, setTotal] = useState(0); //para manejar el total de costos de cada compra\n  //funcion encargada de agregar compras al carrito (asociada al botón de \"agregar al carrito/comprar\")\n\n  function carter(a, b) {\n    //a => cantidad / b => nombre / c => id / d => precio\n    setLong(long + a); //sumo a long (cantindad de items) la cantidad ingresada en la acción de compras\n\n    var flag = false; //para marcar si tengo o no ya el item en el carrito\n\n    var subtotal = b.cantidad * a; //subtotal => cantidad de item * precio\n\n    setTotal(total + subtotal); //total => suma de todos los subtotales\n\n    var kart = [...cart]; //carrito que armao del state-cart\n\n    if (kart.length > 0) {\n      //si ya tengo un item en el carrito, examino si el que acabo de comprar tmb está\n      for (let k in kart) {\n        if (kart[k].id == b.id) {\n          //si es que ya está, actualizo cantidad y precio total\n          kart[k].cantidad = kart[k].cantidad + a;\n          kart[k].subtotal = kart[k].subtotal + subtotal;\n          setCart(kart); //agrego carrito actualizado\n\n          flag = true; //marco bandera\n        }\n      }\n    }\n\n    if (flag == false) {\n      //si la bandera es true, entonces el item es nuevo y lo agrego por acá\n      var purchase = {\n        'cantidad': b.nombre,\n        'nombre': b.id,\n        'id': b.subtotal,\n        'subtotal': subtotal\n      }; //objeto de nueva compra\n\n      var purchases = [...cart, purchase]; //carrito con todo lo anterior y nueva compra\n\n      setCart(purchases);\n    }\n  } //función que se ejecuta al finalizar la compra para volver a 0 valores de referencia\n\n\n  function eraser() {\n    setTotal(0); //vuelvo total a 0 después de finalizar compra\n\n    setLong(0); //vuelvo longitud de items a 0 después de finalizar la compra\n\n    setCart([]); //vacío el carrito después de ejectura la compra\n  }\n\n  const sumaProductos = id => {\n    console.log(id);\n  };\n\n  return /*#__PURE__*/React.createElement(CartContext.Provider, {\n    value: [long, cart, carter, eraser, total],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, props.children);\n};","map":{"version":3,"sources":["C:/xampp/htdocs/React/coderhouse/src/components/Context/CartContext.js"],"names":["React","useState","CartContext","createContext","CartProvider","props","item","setItem","cart","setCart","long","setLong","total","setTotal","carter","a","b","flag","subtotal","cantidad","kart","length","k","id","purchase","nombre","purchases","eraser","sumaProductos","console","log","children"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,MAAMC,WAAW,GAAGF,KAAK,CAACG,aAAN,CAAoB,EAApB,CAApB;AAEP,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAAW;AACrC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC,CAFqC,CAEC;;AACtC,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,CAAD,CAAhC,CAHqC,CAGA;;AACrC,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,CAAD,CAAlC,CAJqC,CAIE;AAEvC;;AACA,WAASa,MAAT,CAAgBC,CAAhB,EAAkBC,CAAlB,EAAoB;AAAE;AAClBL,IAAAA,OAAO,CAACD,IAAI,GAAGK,CAAR,CAAP,CADgB,CACG;;AACnB,QAAIE,IAAI,GAAG,KAAX,CAFgB,CAEE;;AAClB,QAAIC,QAAQ,GAAGF,CAAC,CAACG,QAAF,GAAaJ,CAA5B,CAHgB,CAGe;;AAC/BF,IAAAA,QAAQ,CAACD,KAAK,GAAGM,QAAT,CAAR,CAJgB,CAIW;;AAC3B,QAAIE,IAAI,GAAI,CAAC,GAAGZ,IAAJ,CAAZ,CALgB,CAKO;;AAEvB,QAAGY,IAAI,CAACC,MAAL,GAAc,CAAjB,EAAmB;AAAE;AACjB,WAAK,IAAIC,CAAT,IAAcF,IAAd,EAAoB;AAChB,YAAGA,IAAI,CAACE,CAAD,CAAJ,CAAQC,EAAR,IAAcP,CAAC,CAACO,EAAnB,EAAsB;AAAE;AACpBH,UAAAA,IAAI,CAACE,CAAD,CAAJ,CAAQH,QAAR,GAAmBC,IAAI,CAACE,CAAD,CAAJ,CAAQH,QAAR,GAAmBJ,CAAtC;AACAK,UAAAA,IAAI,CAACE,CAAD,CAAJ,CAAQJ,QAAR,GAAmBE,IAAI,CAACE,CAAD,CAAJ,CAAQJ,QAAR,GAAmBA,QAAtC;AACAT,UAAAA,OAAO,CAACW,IAAD,CAAP,CAHkB,CAGJ;;AACdH,UAAAA,IAAI,GAAG,IAAP,CAJkB,CAIN;AACf;AACJ;AACJ;;AACD,QAAGA,IAAI,IAAI,KAAX,EAAiB;AAAE;AACf,UAAIO,QAAQ,GAAG;AAAC,oBAAYR,CAAC,CAACS,MAAf;AAAsB,kBAAUT,CAAC,CAACO,EAAlC;AAAsC,cAAMP,CAAC,CAACE,QAA9C;AAAwD,oBAAYA;AAApE,OAAf,CADa,CACgF;;AAC7F,UAAIQ,SAAS,GAAI,CAAC,GAAGlB,IAAJ,EAAUgB,QAAV,CAAjB,CAFa,CAEyB;;AACtCf,MAAAA,OAAO,CAACiB,SAAD,CAAP;AACH;AACJ,GA7BoC,CA+BrC;;;AACA,WAASC,MAAT,GAAiB;AACbd,IAAAA,QAAQ,CAAC,CAAD,CAAR,CADa,CACD;;AACZF,IAAAA,OAAO,CAAC,CAAD,CAAP,CAFa,CAEF;;AACXF,IAAAA,OAAO,CAAC,EAAD,CAAP,CAHa,CAGD;AACf;;AAED,QAAMmB,aAAa,GAAIL,EAAD,IAAQ;AAC5BM,IAAAA,OAAO,CAACC,GAAR,CAAYP,EAAZ;AACD,GAFD;;AAMA,sBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE,CAACb,IAAD,EAAOF,IAAP,EAAaM,MAAb,EAAqBa,MAArB,EAA6Bf,KAA7B,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,KAAK,CAAC0B,QADT,CADF;AAKD,CAjDM","sourcesContent":["\r\nimport React, { useState } from 'react';\r\n\r\nexport const CartContext = React.createContext([]);\r\n\r\nexport const CartProvider = (props) => {\r\n  const [item, setItem] = useState([]);\r\n  const [cart, setCart] = useState([]); //para manejar el array del carrito\r\n  const [long, setLong] = useState(0); //para manejar la longitud (cantidad) de items agregados al carrito (comienza en 0)\r\n  const [total, setTotal] = useState(0); //para manejar el total de costos de cada compra\r\n\r\n  //funcion encargada de agregar compras al carrito (asociada al botón de \"agregar al carrito/comprar\")\r\n  function carter(a,b){ //a => cantidad / b => nombre / c => id / d => precio\r\n      setLong(long + a)  //sumo a long (cantindad de items) la cantidad ingresada en la acción de compras\r\n      var flag = false; //para marcar si tengo o no ya el item en el carrito\r\n      var subtotal = b.cantidad * a; //subtotal => cantidad de item * precio\r\n      setTotal(total + subtotal) //total => suma de todos los subtotales\r\n      var kart = ([...cart]) //carrito que armao del state-cart\r\n\r\n      if(kart.length > 0){ //si ya tengo un item en el carrito, examino si el que acabo de comprar tmb está\r\n          for (let k in kart) {\r\n              if(kart[k].id == b.id){ //si es que ya está, actualizo cantidad y precio total\r\n                  kart[k].cantidad = kart[k].cantidad + a;\r\n                  kart[k].subtotal = kart[k].subtotal + subtotal;\r\n                  setCart(kart) //agrego carrito actualizado\r\n                  flag = true //marco bandera\r\n              }\r\n          }\r\n      }\r\n      if(flag == false){ //si la bandera es true, entonces el item es nuevo y lo agrego por acá\r\n          var purchase = {'cantidad': b.nombre,'nombre': b.id, 'id': b.subtotal, 'subtotal': subtotal} //objeto de nueva compra\r\n          var purchases = ([...cart, purchase]) //carrito con todo lo anterior y nueva compra\r\n          setCart(purchases)\r\n      }\r\n  }\r\n\r\n  //función que se ejecuta al finalizar la compra para volver a 0 valores de referencia\r\n  function eraser(){\r\n      setTotal(0) //vuelvo total a 0 después de finalizar compra\r\n      setLong(0) //vuelvo longitud de items a 0 después de finalizar la compra\r\n      setCart([]) //vacío el carrito después de ejectura la compra\r\n  }\r\n\r\n  const sumaProductos = (id) => {\r\n    console.log(id);\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <CartContext.Provider value={[long, cart, carter, eraser, total]}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}