{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\React\\\\coderhouse\\\\src\\\\components\\\\Context\\\\CartContext.js\";\n// \n// import React, { useState } from 'react';\n//\n// export const CartContext = React.createContext([]);\n//\n// export const CartProvider = (props) => {\n//   const [cart, setCart] = useState([]);\n//\n//   const [item, setItem] = useState([]);\n//\n//   const sumaProductos = (id) => {\n//     console.log(id);\n//   }\n//\n//\n//\n//   return (\n//     <CartContext.Provider value={[cart, setCart, item, setItem, sumaProductos]}>\n//       {props.children}\n//     </CartContext.Provider>\n//   )\n// }\nimport React from 'react';\nimport { useState } from 'react';\nexport const CartContext = React.createContext([]);\n\nconst CartContextProvider = props => {\n  const [cart, setCart] = useState([]); //para manejar el array del carrito\n\n  const [long, setLong] = useState(0); //para manejar la longitud (cantidad) de items agregados al carrito (comienza en 0)\n\n  const [total, setTotal] = useState(0); //para manejar el total de costos de cada compra\n  //funcion encargada de agregar compras al carrito (asociada al botón de \"agregar al carrito/comprar\")\n\n  function carter(a, b, c, d) {\n    //a => cantidad / b => nombre / c => id / d => precio\n    setLong(long + a); //sumo a long (cantindad de items) la cantidad ingresada en la acción de compras\n\n    var flag = false; //para marcar si tengo o no ya el item en el carrito\n\n    var subtotal = d * a; //subtotal => cantidad de item * precio\n\n    setTotal(total + subtotal); //total => suma de todos los subtotales\n\n    var kart = [...cart]; //carrito que armao del state-cart\n\n    if (kart.length > 0) {\n      //si ya tengo un item en el carrito, examino si el que acabo de comprar tmb está\n      for (let k in kart) {\n        if (kart[k].id == c) {\n          //si es que ya está, actualizo cantidad y precio total\n          kart[k].cantidad = kart[k].cantidad + a;\n          kart[k].subtotal = kart[k].subtotal + subtotal;\n          setCart(kart); //agrego carrito actualizado\n\n          flag = true; //marco bandera\n        }\n      }\n    }\n\n    if (flag == false) {\n      //si la bandera es true, entonces el item es nuevo y lo agrego por acá\n      var purchase = {\n        'cantidad': a,\n        'nombre': b,\n        'id': c,\n        'subtotal': subtotal\n      }; //objeto de nueva compra\n\n      var purchases = [...cart, purchase]; //carrito con todo lo anterior y nueva compra\n\n      setCart(purchases);\n    }\n  } //función que se ejecuta al finalizar la compra para volver a 0 valores de referencia\n\n\n  function eraser() {\n    setTotal(0); //vuelvo total a 0 después de finalizar compra\n\n    setLong(0); //vuelvo longitud de items a 0 después de finalizar la compra\n\n    setCart([]); //vacío el carrito después de ejectura la compra\n  }\n\n  return /*#__PURE__*/React.createElement(CartContext.Provider, {\n    value: [long, cart, carter, eraser, total],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default CartContextProvider;","map":{"version":3,"sources":["C:/xampp/htdocs/React/coderhouse/src/components/Context/CartContext.js"],"names":["React","useState","CartContext","createContext","CartContextProvider","props","cart","setCart","long","setLong","total","setTotal","carter","a","b","c","d","flag","subtotal","kart","length","k","id","cantidad","purchase","purchases","eraser","children"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAO,MAAMC,WAAW,GAAGF,KAAK,CAACG,aAAN,CAAoB,EAApB,CAApB;;AAEP,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AACnC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC,CADmC,CACG;;AACtC,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,CAAD,CAAhC,CAFmC,CAEE;;AACrC,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,CAAD,CAAlC,CAHmC,CAGI;AAEvC;;AACA,WAASW,MAAT,CAAgBC,CAAhB,EAAkBC,CAAlB,EAAoBC,CAApB,EAAsBC,CAAtB,EAAwB;AAAE;AACtBP,IAAAA,OAAO,CAACD,IAAI,GAAGK,CAAR,CAAP,CADoB,CACD;;AACnB,QAAII,IAAI,GAAG,KAAX,CAFoB,CAEF;;AAClB,QAAIC,QAAQ,GAAGF,CAAC,GAAGH,CAAnB,CAHoB,CAGE;;AACtBF,IAAAA,QAAQ,CAACD,KAAK,GAAGQ,QAAT,CAAR,CAJoB,CAIO;;AAC3B,QAAIC,IAAI,GAAI,CAAC,GAAGb,IAAJ,CAAZ,CALoB,CAKG;;AAEvB,QAAGa,IAAI,CAACC,MAAL,GAAc,CAAjB,EAAmB;AAAE;AACjB,WAAK,IAAIC,CAAT,IAAcF,IAAd,EAAoB;AAChB,YAAGA,IAAI,CAACE,CAAD,CAAJ,CAAQC,EAAR,IAAcP,CAAjB,EAAmB;AAAE;AACjBI,UAAAA,IAAI,CAACE,CAAD,CAAJ,CAAQE,QAAR,GAAmBJ,IAAI,CAACE,CAAD,CAAJ,CAAQE,QAAR,GAAmBV,CAAtC;AACAM,UAAAA,IAAI,CAACE,CAAD,CAAJ,CAAQH,QAAR,GAAmBC,IAAI,CAACE,CAAD,CAAJ,CAAQH,QAAR,GAAmBA,QAAtC;AACAX,UAAAA,OAAO,CAACY,IAAD,CAAP,CAHe,CAGD;;AACdF,UAAAA,IAAI,GAAG,IAAP,CAJe,CAIH;AACf;AACJ;AACJ;;AACD,QAAGA,IAAI,IAAI,KAAX,EAAiB;AAAE;AACf,UAAIO,QAAQ,GAAG;AAAC,oBAAYX,CAAb;AAAe,kBAAUC,CAAzB;AAA4B,cAAMC,CAAlC;AAAqC,oBAAYG;AAAjD,OAAf,CADa,CAC6D;;AAC1E,UAAIO,SAAS,GAAI,CAAC,GAAGnB,IAAJ,EAAUkB,QAAV,CAAjB,CAFa,CAEyB;;AACtCjB,MAAAA,OAAO,CAACkB,SAAD,CAAP;AACH;AACJ,GA5BkC,CA8BnC;;;AACA,WAASC,MAAT,GAAiB;AACbf,IAAAA,QAAQ,CAAC,CAAD,CAAR,CADa,CACD;;AACZF,IAAAA,OAAO,CAAC,CAAD,CAAP,CAFa,CAEF;;AACXF,IAAAA,OAAO,CAAC,EAAD,CAAP,CAHa,CAGD;AACf;;AAED,sBACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE,CAACC,IAAD,EAAOF,IAAP,EAAaM,MAAb,EAAqBc,MAArB,EAA6BhB,KAA7B,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKL,KAAK,CAACsB,QADX,CADJ;AAKH,CA1CD;;AA4CA,eAAevB,mBAAf","sourcesContent":["// \r\n// import React, { useState } from 'react';\r\n//\r\n// export const CartContext = React.createContext([]);\r\n//\r\n// export const CartProvider = (props) => {\r\n//   const [cart, setCart] = useState([]);\r\n//\r\n//   const [item, setItem] = useState([]);\r\n//\r\n//   const sumaProductos = (id) => {\r\n//     console.log(id);\r\n//   }\r\n//\r\n//\r\n//\r\n//   return (\r\n//     <CartContext.Provider value={[cart, setCart, item, setItem, sumaProductos]}>\r\n//       {props.children}\r\n//     </CartContext.Provider>\r\n//   )\r\n// }\r\n\r\n\r\nimport React from 'react';\r\nimport { useState } from 'react';\r\n\r\nexport const CartContext = React.createContext([]);\r\n\r\nconst CartContextProvider = (props) => {\r\n    const [cart, setCart] = useState([]); //para manejar el array del carrito\r\n    const [long, setLong] = useState(0); //para manejar la longitud (cantidad) de items agregados al carrito (comienza en 0)\r\n    const [total, setTotal] = useState(0); //para manejar el total de costos de cada compra\r\n\r\n    //funcion encargada de agregar compras al carrito (asociada al botón de \"agregar al carrito/comprar\")\r\n    function carter(a,b,c,d){ //a => cantidad / b => nombre / c => id / d => precio\r\n        setLong(long + a)  //sumo a long (cantindad de items) la cantidad ingresada en la acción de compras\r\n        var flag = false; //para marcar si tengo o no ya el item en el carrito\r\n        var subtotal = d * a; //subtotal => cantidad de item * precio\r\n        setTotal(total + subtotal) //total => suma de todos los subtotales\r\n        var kart = ([...cart]) //carrito que armao del state-cart\r\n\r\n        if(kart.length > 0){ //si ya tengo un item en el carrito, examino si el que acabo de comprar tmb está\r\n            for (let k in kart) {\r\n                if(kart[k].id == c){ //si es que ya está, actualizo cantidad y precio total\r\n                    kart[k].cantidad = kart[k].cantidad + a;\r\n                    kart[k].subtotal = kart[k].subtotal + subtotal;\r\n                    setCart(kart) //agrego carrito actualizado\r\n                    flag = true //marco bandera\r\n                }\r\n            }\r\n        }\r\n        if(flag == false){ //si la bandera es true, entonces el item es nuevo y lo agrego por acá\r\n            var purchase = {'cantidad': a,'nombre': b, 'id': c, 'subtotal': subtotal} //objeto de nueva compra\r\n            var purchases = ([...cart, purchase]) //carrito con todo lo anterior y nueva compra\r\n            setCart(purchases)\r\n        }\r\n    }\r\n\r\n    //función que se ejecuta al finalizar la compra para volver a 0 valores de referencia\r\n    function eraser(){\r\n        setTotal(0) //vuelvo total a 0 después de finalizar compra\r\n        setLong(0) //vuelvo longitud de items a 0 después de finalizar la compra\r\n        setCart([]) //vacío el carrito después de ejectura la compra\r\n    }\r\n\r\n    return(\r\n        <CartContext.Provider value={[long, cart, carter, eraser, total ]}>\r\n            {props.children}\r\n        </CartContext.Provider>\r\n    )\r\n}\r\n\r\nexport default CartContextProvider;\r\n"]},"metadata":{},"sourceType":"module"}